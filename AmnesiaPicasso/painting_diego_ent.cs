// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace AmnesiaPicasso
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\petrs\OneDrive\Dokumenty\GitHub\AmnesiaPicasso\AmnesiaPicasso\painting_diego_ent.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class painting_diego_ent : painting_diego_entBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"<Entity>
    <EditorSession>
        <Performance CamClipPlanes=""0.05 1000"" LightsActive=""true"" PSActive=""true"" ShowFog=""true"" ShowSkybox=""true"" WorldReflection=""true"" />
        <ViewportConfig BGColor=""0.2 0.2 0.2 1"" GAmbientLight=""true"" GPointLight=""true"" GridSnap=""false"" GridSnapSeparation=""0.25"" SelectedViewport=""3"" UsingEnlargedViewport=""true"">
            <Viewport CameraPosition=""0.045 0.89 20"" CameraTarget=""0.045 0.89 0"" CameraZoom=""0.916291"" GridHeight=""0"" GridPlane=""2"" Preset=""0"" RenderMode=""1"" ShowAxes=""true"" ShowGrid=""true"" UsingLTCam=""true"" />
            <Viewport CameraPosition=""20 0 0"" CameraTarget=""0 0 0"" CameraZoom=""0.916291"" GridHeight=""0"" GridPlane=""0"" Preset=""1"" RenderMode=""1"" ShowAxes=""true"" ShowGrid=""true"" UsingLTCam=""true"" />
            <Viewport CameraPosition=""0 20 0"" CameraTarget=""0 0 0"" CameraZoom=""0.916291"" GridHeight=""0"" GridPlane=""1"" Preset=""2"" RenderMode=""1"" ShowAxes=""true"" ShowGrid=""true"" UsingLTCam=""true"" />
            <Viewport CameraPosition=""-1.46819 3.25728 2.82496"" CameraTarget=""-0.899353 1.02775 0.376062"" CameraZoom=""2.7"" GridHeight=""0"" GridPlane=""1"" Preset=""3"" RenderMode=""0"" ShowAxes=""true"" ShowGrid=""true"" UsingLTCam=""true"" />
        </ViewportConfig>
    </EditorSession>
    <ModelData>
        <Entities />
        <Mesh Filename=""");
            
            #line 18 "C:\Users\petrs\OneDrive\Dokumenty\GitHub\AmnesiaPicasso\AmnesiaPicasso\painting_diego_ent.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DaeName));
            
            #line default
            #line hidden
            this.Write(".dae\">\r\n            <SubMesh Active=\"true\" ID=\"0\" Material=\"\" Name=\"pPlane1\" Rota" +
                    "tion=\"0 0 0\" Scale=\"1 1 1\" SubMeshID=\"0\" Tag=\"\" WorldPos=\"0 0 0\" />\r\n        </M" +
                    "esh>\r\n        <Bones />\r\n        <Shapes>\r\n            <BodyShape Active=\"true\" " +
                    "ID=\"4\" Name=\"Shape_4\" RelativeRotation=\"0 -0 0\" RelativeScale=\"2.1 2.1 0.15\" Rel" +
                    "ativeTranslation=\"0 0 0\" Rotation=\"0 0 0\" Scale=\"2.1 2.1 0.15\" ShapeType=\"Box\" T" +
                    "ag=\"\" WorldPos=\"-0.000212 0.998051 -0.007765\" />\r\n        </Shapes>\r\n        <Bo" +
                    "dies>\r\n            <Body Active=\"true\" AngularDamping=\"0\" BlocksSound=\"false\" Bu" +
                    "oyancyDensityMul=\"1\" CanAttachCharacter=\"true\" CollideCharacter=\"true\" CollideNo" +
                    "nCharacter=\"true\" ContinuousCollision=\"true\" HasGravity=\"true\" ID=\"5\" LinearDamp" +
                    "ing=\"0\" Mass=\"0\" Material=\"Default\" MaxAngularSpeed=\"0\" MaxLinearSpeed=\"0\" Name=" +
                    "\"Body_1\" PushedByCharacterGravity=\"true\" Rotation=\"0 0 0\" Scale=\"1 1 1\" Tag=\"\" U" +
                    "seSurfaceEffects=\"true\" Volatile=\"false\" WorldPos=\"-0.000212 0.998051 -0.007765\"" +
                    ">\r\n                <Children>\r\n                    <Child ID=\"0\" />\r\n           " +
                    "     </Children>\r\n                <Shape ID=\"4\" />\r\n            </Body>\r\n       " +
                    " </Bodies>\r\n        <Joints />\r\n        <Animations />\r\n    </ModelData>\r\n    <U" +
                    "serDefinedVariables EntitySubType=\"Static\" EntityType=\"Object\">\r\n        <Var Na" +
                    "me=\"Health\" Value=\"100\" />\r\n        <Var Name=\"Toughness\" Value=\"0\" />\r\n        " +
                    "<Var Name=\"MaxFocusDistance\" Value=\"0\" />\r\n        <Var Name=\"MainPhysicsBody\" V" +
                    "alue=\"\" />\r\n        <Var Name=\"ShowMesh\" Value=\"true\" />\r\n        <Var Name=\"Dis" +
                    "solveOnDestruction\" Value=\"false\" />\r\n        <Var Name=\"DissolveTime\" Value=\"1." +
                    "0\" />\r\n        <Var Name=\"EffectsOnSound\" Value=\"\" />\r\n        <Var Name=\"Effect" +
                    "sOffSound\" Value=\"\" />\r\n        <Var Name=\"EffectsOnTime\" Value=\"1\" />\r\n        " +
                    "<Var Name=\"EffectsOffTime\" Value=\"1\" />\r\n        <Var Name=\"EffectsOffLightColor" +
                    "\" Value=\"0 0 0 0\" />\r\n        <Var Name=\"EffectsOffLightRadius\" Value=\"-1\" />\r\n " +
                    "       <Var Name=\"ShowHints\" Value=\"true\" />\r\n        <Var Name=\"StaticMoveCheck" +
                    "Collision\" Value=\"false\" />\r\n        <Var Name=\"StaticMoveStartSound\" Value=\"\" /" +
                    ">\r\n        <Var Name=\"StaticMoveStopSound\" Value=\"\" />\r\n        <Var Name=\"Stati" +
                    "cMoveLoopSound\" Value=\"\" />\r\n        <Var Name=\"RandomizeAnimationStart\" Value=\"" +
                    "true\" />\r\n        <Var Name=\"BreakActive\" Value=\"false\" />\r\n        <Var Name=\"B" +
                    "reakDestroyJoints\" Value=\"false\" />\r\n        <Var Name=\"BreakMinEnergy\" Value=\"1" +
                    "00\" />\r\n        <Var Name=\"BreakEntity\" Value=\"\" />\r\n        <Var Name=\"BreakEnt" +
                    "ityAlignBody\" Value=\"\" />\r\n        <Var Name=\"BreakSound\" Value=\"\" />\r\n        <" +
                    "Var Name=\"BreakParticleSystem\" Value=\"\" />\r\n        <Var Name=\"BreakImpulse\" Val" +
                    "ue=\"4\" />\r\n        <Var Name=\"HitDamageAmount\" Value=\"5\" />\r\n        <Var Name=\"" +
                    "HitDamageStrength\" Value=\"1\" />\r\n        <Var Name=\"MinHitDamageSpeed\" Value=\"3\"" +
                    " />\r\n        <Var Name=\"LifeLength\" Value=\"0\" />\r\n        <Var Name=\"IsFood\" Val" +
                    "ue=\"false\" />\r\n    </UserDefinedVariables>\r\n</Entity>\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 71 "C:\Users\petrs\OneDrive\Dokumenty\GitHub\AmnesiaPicasso\AmnesiaPicasso\painting_diego_ent.tt"

public string DaeName { get; set; }

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class painting_diego_entBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
